{"version":3,"sources":["components/Header.js","components/Card.js","containers/ErrorBoundry.js","components/CardsArray.js","components/SearchBox.js","components/Scroll.js","containers/App.js","modules/actions.js","modules/constants.js","modules/reducers.js","serviceWorker.js","index.js"],"names":["Header","className","React","PureComponent","Card","name","email","src","alt","ErrorBoundry","state","hasError","this","setState","key","props","children","Component","CardsArray","robots","map","robot","id","SearchBox","aria-label","type","placeholder","onChange","onSearchChange","Scroll","style","overflow","height","border","App","onRequestRobots","searchField","isPending","filteredRobots","filter","toLowerCase","includes","connect","searchReducer","requestReducer","error","dispatch","event","payload","target","value","customUsers","fetch","then","response","json","users","unshift","user","push","catch","initialStateSearch","initialStateRobots","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunk","logger","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f9c50051.chunk.js","sourcesContent":["import React from 'react';\n\nclass Header extends React.PureComponent {\n    render() {\n        return <h1 className='pt-4'>Robofriends</h1>;\n    }\n}\n\nexport default Header;\n","import React from 'react';\n\nconst Card = ({ name, email }) => {\n    // if(name === 'Clementine Bauch') {\n    //     throw new Error();\n    // }\n    return (\n        <div className='bg-light m-3 shadow rounded grow'>\n            <img\n                className='rounded-top'\n                src={`https://robohash.org/${name}.png?size=220x220&bgset=bg1`}\n                alt='robots'\n            />\n            <div className='text-center'>\n                <h5>{name}</h5>\n                <p>{email}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from '../components/Card';\n\nclass ErrorBoundry extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch() {\n        this.setState({ hasError: true });\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <Card key='666' name='Broken... :(' email='nope...'></Card>\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundry;\n","import React from 'react';\nimport Card from './Card';\nimport ErrorBoundry from '../containers/ErrorBoundry';\n\nconst CardsArray = ({robots}) => {\n    return(\n        <div className='d-flex justify-content-around flex-wrap mt-3 mb-3'>\n            <ErrorBoundry>\n                {\n                    robots.map(robot => {\n                        return (\n                                <Card\n                                    key={robot.id}\n                                    name={robot.name}\n                                    email={robot.email}\n                                />\n                                ) \n                            })\n                        }\n            </ErrorBoundry>\n        </div>\n    )\n}\n\nexport default CardsArray;\n","import React from 'react';\n\nconst SearchBox = (props) => {\n    return(\n        <div className='form-inline justify-content-center pt-3 pb-3'>\n            <input\n                aria-label='Search Robots'\n                className='form-control'\n                type='search' \n                placeholder='Search robots'\n                onChange={props.onSearchChange}\n            />\n        </div>\n    )\n}\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflow: 'scroll', height: '615px', border: '1px solid black'}} className='shadow'>\n            {props.children}\n        </div>\n    );\n};\n\nexport default Scroll;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport Header from '../components/Header';\nimport CardsArray from '../components/CardsArray';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\n\nimport { searchAction, requestAction } from '../modules/actions';\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchReducer.searchField,\n    robots: state.requestReducer.robots,\n    isPending: state.requestReducer.isPending,\n    error: state.requestReducer.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(searchAction(event.target.value)),\n    onRequestRobots: () => dispatch(requestAction()) //needs redux-thunk, otherwise it expects an obj\n  }\n}\n\nclass App extends React.Component {\n  \n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { searchField, onSearchChange , robots, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n\n    return (\n      <div className='text-center'>\n        <Header />\n        <SearchBox onSearchChange={onSearchChange}/>\n        {\n          isPending \n            ? <h2>Loading...</h2>\n            : <Scroll>\n                {/* <ErrorBoundry> */}\n                  <CardsArray robots={filteredRobots} />\n                {/* </ErrorBoundry> */}\n              </Scroll>\n        }\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants.js';\n\nexport const searchAction = (text) => {\n    return {\n        type: CHANGE_SEARCH_FIELD,\n        payload: text\n    }\n}\n\nexport const requestAction = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    \n    const customUsers = [\n        {\n            id: 1000,\n            name: 'Ali'\n        },\n        {\n            id: 1001,\n            name: 'Ale'\n        },\n        {\n            id: 1002,\n            name: 'Ane'\n        }\n    ];\n\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(users => {\n            users.unshift({ id: 0, name: 'Hey you!', email: 'special-one@mail.com' });\n            for (let user of customUsers) {\n                users.push({ id: user.id, name: user.name, email: user.name + '@mail.com' });\n            };            \n            dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: users })\n        })\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants.js';\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchReducer = (state = initialStateSearch, action = {}) => {\n    switch(action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, { searchField: action.payload });\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    robots: [],\n    isPending: false,\n    error: ''\n}\n\nexport const requestReducer = (state = initialStateRobots, action = {}) => {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending: true });\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, { robots: action.payload, isPending: false });\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, { error: action.payload, isPending: false});\n        default:\n            return state;\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport logger from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport { searchReducer, requestReducer } from './modules/reducers';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst rootReducer = combineReducers({ searchReducer, requestReducer });\nconst store = createStore(rootReducer, applyMiddleware(thunk, logger));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}